{"version":3,"sources":["Children.js","App.js","serviceWorker.js","index.js"],"names":["Children","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nextProps","objectSpread","users","length","react_default","a","createElement","map","user","key","Component","App","_this","state","filteredUsers","lastEvent","className","onInput","handleChange","bind","src_Children_0","e","_this2","text","currentTarget","value","setState","getFilteredUsersForText","then","Promise","resolve","time","Math","random","setTimeout","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAwBeA,qBApBb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,2FAEkBO,GACxBJ,KAAKH,MAALC,OAAAO,EAAA,EAAAP,CAAA,GAAkBM,oCAGlB,OAAIJ,KAAKH,MAAMS,MAAMC,OAAS,EAE1BC,EAAAC,EAAAC,cAAA,UACGV,KAAKH,MAAMS,MAAMK,IAAI,SAAAC,GAAI,OACxBJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,GAAOA,MAKjBJ,EAAAC,EAAAC,cAAA,iCAjBYI,cCCjBR,EAAQ,CAAC,SAAU,OAAQ,SAuClBS,cApCb,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAlB,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IACjBC,EAAAlB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAMH,KACDoB,MAAQ,CAAEC,cAAeZ,EAAOa,UAAW,MAF/BH,wEAMjB,OACER,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,SAAOW,QAASrB,KAAKsB,aAAaC,KAAKvB,QACvCQ,EAAAC,EAAAC,cAACc,EAAD,CAAUlB,MAAON,KAAKiB,MAAMC,sDAIrBO,GAAG,IAAAC,EAAA1B,KACR2B,EAAOF,EAAEG,cAAcC,MAC7B7B,KAAK8B,SAAS,CAAEX,UAAWM,IAC3BzB,KAAK+B,wBAAwBJ,GAAMK,KAAK,SAAAd,GAClCO,IAAMC,EAAKT,MAAME,WACnBO,EAAKI,SAAS,CAAEZ,oEAKES,GACtB,OAAO,IAAIM,QAAQ,SAAAC,GACjB,IAAMC,EAA6B,KAArBC,KAAKC,SAAW,GAC9BC,WAAW,WACT,IAAMpB,EAAgBZ,EAAMiC,OAAO,SAAA3B,GAAI,OACrCA,EAAK4B,cAAcC,SAASd,EAAKa,iBAEnCN,EAAQhB,IACPiB,YAhCSrB,aCME4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.34ce8104.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Children.css';\r\n\r\nclass Children extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    this.props = { ...nextProps };\r\n  }\r\n  render() {\r\n    if (this.props.users.length > 0) {\r\n      return (\r\n        <ul>\r\n          {this.props.users.map(user => (\r\n            <li key={user}>{user}</li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n    return <div>No Results!</div>;\r\n  }\r\n}\r\n\r\nexport default Children;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Children from './Children';\r\n\r\nconst users = ['Michal', 'Ania', 'Kasia'];\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { filteredUsers: users, lastEvent: null };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <input onInput={this.handleChange.bind(this)} />\r\n        <Children users={this.state.filteredUsers} />\r\n      </div>\r\n    );\r\n  }\r\n  handleChange(e) {\r\n    const text = e.currentTarget.value;\r\n    this.setState({ lastEvent: e });\r\n    this.getFilteredUsersForText(text).then(filteredUsers => {\r\n      if (e === this.state.lastEvent) {\r\n        this.setState({ filteredUsers });\r\n      }\r\n    });\r\n  }\r\n\r\n  getFilteredUsersForText(text) {\r\n    return new Promise(resolve => {\r\n      const time = (Math.random() + 1) * 250;\r\n      setTimeout(() => {\r\n        const filteredUsers = users.filter(user =>\r\n          user.toLowerCase().includes(text.toLowerCase()),\r\n        );\r\n        resolve(filteredUsers);\r\n      }, time);\r\n    });\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}